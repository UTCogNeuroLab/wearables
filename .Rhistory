fname = strsplit(i, "/")[[1]][9]
substring(fname, 1, 8)
subject = substring(fname, 1, 8)
# read in their fitbit data, df
df <- read.csv(i)
head(df)
# list all heart rate data files and select the first as an example
hr_files <- list.files("~/Box/CogNeuroLab/Wearables/data/fitbit/", pattern = "heartrate_1min", full.names = TRUE)
hr_files
hr_fname <- paste0(data_dir, subject, "_heartrate_1min_20190901_20200327.csv")
hr_fname
hr_fname <- paste0(data_dir, "/", subject, "_heartrate_1min_20190901_20200327.csv")
hr_fname
paste0(out_dir, "/", subject, "_interpolated_mean.csv")
hr <- read.csv(hr_fname)
hr
# find fitbit data start and end times and create a sequence in 1 minute intervals
df <- c()
df$Time <- seq(mdy_hms(head(hr[,1], 1)), mdy_hms(tail(hr[,1], 1)), by = "1 min")
library(lubridate)
df$Time <- seq(mdy_hms(head(hr[,1], 1)), mdy_hms(tail(hr[,1], 1)), by = "1 min")
hr$Time <- mdy_hms(hr$Time)
df$Time
# merge sequence with actual fitbit data to identify nans in hr data and associated timestamps
df2 <- merge(df, hr, by = "Time", all = T)
# load in subject's activity data file
# read in their fitbit data, df
df <- read.csv(i)
df$ActivityMinute <- mdy_hms(df$ActivityMinute)
# merge heart rate data and steps data
df3 <- merge(df2, df, by.x = "Time", by.y = "ActivityMinute")
# set NA values for steps where HR is NA
df3$Steps <- ifelse(is.na(df3$Value), NA, df3$Steps)
df3$Steps
sum(is.na(df3$Steps))
# create df$StepsInt
dfInt <- interpolate_steps(df3)
interpolate_steps <- function(df){
# where df is a dataframe containing Steps by minute from fitbit
# create new dataframe
df$StepsInt <- df$Steps
x <- find_missing(df$StepsInt)
while (dim(x)[1] > 0) {
# convert start and end times to clocktimes
startclock=lubridate::hour(x$start_missing[1]) + lubridate::minute(x$start_missing[1])/60
endclock=lubridate::hour(x$end_missing[1]) + lubridate::minute(x$end_missing[1])/60
# get index values for missing period
replaceindex <- which((df$Time >= ymd_hms(x$start_missing[1])) & (df$Time <= ymd_hms(x$end_missing[1])))
# now we want to see the steps data during the time period of interest on all other days
mean_steps <- df %>%
filter(clocktime >= startclock) %>%
filter(clocktime <= endclock) %>%
summarise(mean_steps = mean(Steps, na.rm = T)) %>%
unlist()
# replace values with the mean steps value from all other time periods
df$StepsInt[replaceindex] <- mean_steps
# checking that we replaced them all
missing <- df %>%
filter(Time > ymd_hms(x$start_missing[1])) %>%
filter(Time < ymd_hms(x$end_missing[1])) %>%
summarise(missing = sum(is.na(StepsInt))) %>%
unlist()
if (missing > 0){
print("error - detected missing values!")
} else {
print(paste0("all missing values replaced, ", sum(is.na(df$StepsInt)), " remaining"))
}
# make a plot to check that NA periods of interest are being interpolated
x <- data.frame(x, seq_along(start))
p <- df %>%
filter(Time > ymd_hms(x$start_missing[1]) - as.difftime(5, unit="mins")) %>%
filter(Time < ymd_hms(x$end_missing[1]) + as.difftime(5, unit="mins")) %>%
select(Time, Steps, StepsInt) %>%
melt(id.vars = c("Time")) %>%
ggplot() +
geom_rect(data=x, inherit.aes=FALSE, aes(xmin=ymd_hms(start_missing[1]), xmax=ymd_hms(end_missing[1]), ymin=-Inf,
ymax=Inf), fill="yellow", alpha=0.02) +
geom_line(aes(x = Time, y = value, group = variable, color = variable)) +
facet_wrap(. ~ variable, nrow = 2) +
scale_color_brewer(palette = "Set1") +
theme_classic() +
xlab("Time") + ylab("Steps") +
ylim(-0.1, max(df$Steps, na.rm = T))
# to do: figure out how to get these plots to print while in a while loop!
print(p)
# check for missing periods and update on each round of interpolation
x <- find_missing(df$StepsInt)
print(dim(x)[1])
}
return(df)
}
# create df$StepsInt
dfInt <- interpolate_steps(df3)
library(dplyr)
library(ggplot2)
library(zoo)
library(reshape2)
# create df$StepsInt
dfInt <- interpolate_steps(df3)
interpolate_steps <- function(df){
# where df is a dataframe containing Steps by minute from fitbit
df <- c()
x <- c()
# create new dataframe
df$StepsInt <- df$Steps
x <- find_missing(df$StepsInt)
while (dim(x)[1] > 0) {
# convert start and end times to clocktimes
startclock=lubridate::hour(x$start_missing[1]) + lubridate::minute(x$start_missing[1])/60
endclock=lubridate::hour(x$end_missing[1]) + lubridate::minute(x$end_missing[1])/60
# get index values for missing period
replaceindex <- which((df$Time >= ymd_hms(x$start_missing[1])) & (df$Time <= ymd_hms(x$end_missing[1])))
# now we want to see the steps data during the time period of interest on all other days
mean_steps <- df %>%
filter(clocktime >= startclock) %>%
filter(clocktime <= endclock) %>%
summarise(mean_steps = mean(Steps, na.rm = T)) %>%
unlist()
# replace values with the mean steps value from all other time periods
df$StepsInt[replaceindex] <- mean_steps
# checking that we replaced them all
missing <- df %>%
filter(Time > ymd_hms(x$start_missing[1])) %>%
filter(Time < ymd_hms(x$end_missing[1])) %>%
summarise(missing = sum(is.na(StepsInt))) %>%
unlist()
if (missing > 0){
print("error - detected missing values!")
} else {
print(paste0("all missing values replaced, ", sum(is.na(df$StepsInt)), " remaining"))
}
# make a plot to check that NA periods of interest are being interpolated
x <- data.frame(x, seq_along(start))
p <- df %>%
filter(Time > ymd_hms(x$start_missing[1]) - as.difftime(5, unit="mins")) %>%
filter(Time < ymd_hms(x$end_missing[1]) + as.difftime(5, unit="mins")) %>%
select(Time, Steps, StepsInt) %>%
melt(id.vars = c("Time")) %>%
ggplot() +
geom_rect(data=x, inherit.aes=FALSE, aes(xmin=ymd_hms(start_missing[1]), xmax=ymd_hms(end_missing[1]), ymin=-Inf,
ymax=Inf), fill="yellow", alpha=0.02) +
geom_line(aes(x = Time, y = value, group = variable, color = variable)) +
facet_wrap(. ~ variable, nrow = 2) +
scale_color_brewer(palette = "Set1") +
theme_classic() +
xlab("Time") + ylab("Steps") +
ylim(-0.1, max(df$Steps, na.rm = T))
# to do: figure out how to get these plots to print while in a while loop!
print(p)
# check for missing periods and update on each round of interpolation
x <- find_missing(df$StepsInt)
print(dim(x)[1])
}
return(df)
}
# create df$StepsInt
dfInt <- interpolate_steps(df3)
head(df)
head(df3)
sum(is.na(df3$Steps)
)
# find missing data chunks
find_missing <- function(stepsdata){
x <- df %>%
dplyr::mutate(missing = ifelse(is.na(stepsdata), 1, 0)) %>%
dplyr::group_by(group = cumsum(c(0, diff(missing) != 0))) %>%
filter(missing == 1 & n() > 1) %>%
summarize("start_missing"=min(as.character(Time)),
"end_missing"=max(as.character(Time)),
"length_missing"=n()) %>%
ungroup() %>%
select(-matches("group"))
# create new cloktime variable
x$startclock=lubridate::hour(x$start_missing) + lubridate::minute(x$start_missing)/60
x$endclock=lubridate::hour(x$end_missing) + lubridate::minute(x$end_missing)/60
x <- x[order(x$length_missing),]
return(x)
}
find_missing(df3$Steps)
df3 %>%
dplyr::mutate(missing = ifelse(is.na(stepsdata), 1, 0))
df3$Steps %>%
dplyr::mutate(missing = ifelse(is.na(stepsdata), 1, 0))
df3 %>%
dplyr::mutate(missing = ifelse(is.na(Steps), 1, 0))
# find missing data chunks
find_missing <- function(df){
x <- df %>%
dplyr::mutate(missing = ifelse(is.na(Steps), 1, 0)) %>%
dplyr::group_by(group = cumsum(c(0, diff(missing) != 0))) %>%
filter(missing == 1 & n() > 1) %>%
summarize("start_missing"=min(as.character(Time)),
"end_missing"=max(as.character(Time)),
"length_missing"=n()) %>%
ungroup() %>%
select(-matches("group"))
# create new cloktime variable
x$startclock=lubridate::hour(x$start_missing) + lubridate::minute(x$start_missing)/60
x$endclock=lubridate::hour(x$end_missing) + lubridate::minute(x$end_missing)/60
x <- x[order(x$length_missing),]
return(x)
}
find_missing(df3)
# create df$StepsInt
dfInt <- interpolate_steps(df3)
df3
str(df3)
find_missing(df3)
interpolate_steps <- function(df){
# where df is a dataframe containing Steps by minute from fitbit
# create new dataframe
df$StepsInt <- df$Steps
x <- find_missing(df)
while (dim(x)[1] > 0) {
# convert start and end times to clocktimes
startclock=lubridate::hour(x$start_missing[1]) + lubridate::minute(x$start_missing[1])/60
endclock=lubridate::hour(x$end_missing[1]) + lubridate::minute(x$end_missing[1])/60
# get index values for missing period
replaceindex <- which((df$Time >= ymd_hms(x$start_missing[1])) & (df$Time <= ymd_hms(x$end_missing[1])))
# now we want to see the steps data during the time period of interest on all other days
mean_steps <- df %>%
filter(clocktime >= startclock) %>%
filter(clocktime <= endclock) %>%
summarise(mean_steps = mean(Steps, na.rm = T)) %>%
unlist()
# replace values with the mean steps value from all other time periods
df$StepsInt[replaceindex] <- mean_steps
# checking that we replaced them all
missing <- df %>%
filter(Time > ymd_hms(x$start_missing[1])) %>%
filter(Time < ymd_hms(x$end_missing[1])) %>%
summarise(missing = sum(is.na(StepsInt))) %>%
unlist()
if (missing > 0){
print("error - detected missing values!")
} else {
print(paste0("all missing values replaced, ", sum(is.na(df$StepsInt)), " remaining"))
}
# make a plot to check that NA periods of interest are being interpolated
x <- data.frame(x, seq_along(start))
p <- df %>%
filter(Time > ymd_hms(x$start_missing[1]) - as.difftime(5, unit="mins")) %>%
filter(Time < ymd_hms(x$end_missing[1]) + as.difftime(5, unit="mins")) %>%
select(Time, Steps, StepsInt) %>%
melt(id.vars = c("Time")) %>%
ggplot() +
geom_rect(data=x, inherit.aes=FALSE, aes(xmin=ymd_hms(start_missing[1]), xmax=ymd_hms(end_missing[1]), ymin=-Inf,
ymax=Inf), fill="yellow", alpha=0.02) +
geom_line(aes(x = Time, y = value, group = variable, color = variable)) +
facet_wrap(. ~ variable, nrow = 2) +
scale_color_brewer(palette = "Set1") +
theme_classic() +
xlab("Time") + ylab("Steps") +
ylim(-0.1, max(df$Steps, na.rm = T))
# to do: figure out how to get these plots to print while in a while loop!
print(p)
# check for missing periods and update on each round of interpolation
x <- find_missing(df$StepsInt)
print(dim(x)[1])
}
return(df)
}
interpolate_steps(df3)
interpolate_steps <- function(df){
# where df is a dataframe containing Steps by minute from fitbit
df$clocktime=lubridate::hour(df$Time) + lubridate::minute(df$Time)/60
# create new dataframe
df$StepsInt <- df$Steps
x <- find_missing(df)
while (dim(x)[1] > 0) {
# convert start and end times to clocktimes
startclock=lubridate::hour(x$start_missing[1]) + lubridate::minute(x$start_missing[1])/60
endclock=lubridate::hour(x$end_missing[1]) + lubridate::minute(x$end_missing[1])/60
# get index values for missing period
replaceindex <- which((df$Time >= ymd_hms(x$start_missing[1])) & (df$Time <= ymd_hms(x$end_missing[1])))
# now we want to see the steps data during the time period of interest on all other days
mean_steps <- df %>%
filter(clocktime >= startclock) %>%
filter(clocktime <= endclock) %>%
summarise(mean_steps = mean(Steps, na.rm = T)) %>%
unlist()
# replace values with the mean steps value from all other time periods
df$StepsInt[replaceindex] <- mean_steps
# checking that we replaced them all
missing <- df %>%
filter(Time > ymd_hms(x$start_missing[1])) %>%
filter(Time < ymd_hms(x$end_missing[1])) %>%
summarise(missing = sum(is.na(StepsInt))) %>%
unlist()
if (missing > 0){
print("error - detected missing values!")
} else {
print(paste0("all missing values replaced, ", sum(is.na(df$StepsInt)), " remaining"))
}
# make a plot to check that NA periods of interest are being interpolated
x <- data.frame(x, seq_along(start))
p <- df %>%
filter(Time > ymd_hms(x$start_missing[1]) - as.difftime(5, unit="mins")) %>%
filter(Time < ymd_hms(x$end_missing[1]) + as.difftime(5, unit="mins")) %>%
select(Time, Steps, StepsInt) %>%
melt(id.vars = c("Time")) %>%
ggplot() +
geom_rect(data=x, inherit.aes=FALSE, aes(xmin=ymd_hms(start_missing[1]), xmax=ymd_hms(end_missing[1]), ymin=-Inf,
ymax=Inf), fill="yellow", alpha=0.02) +
geom_line(aes(x = Time, y = value, group = variable, color = variable)) +
facet_wrap(. ~ variable, nrow = 2) +
scale_color_brewer(palette = "Set1") +
theme_classic() +
xlab("Time") + ylab("Steps") +
ylim(-0.1, max(df$Steps, na.rm = T))
# to do: figure out how to get these plots to print while in a while loop!
print(p)
# check for missing periods and update on each round of interpolation
x <- find_missing(df$StepsInt)
print(dim(x)[1])
}
return(df)
}
interpolate_steps(df3)
interpolate_steps <- function(df){
# where df is a dataframe containing Steps by minute from fitbit
df$clocktime=lubridate::hour(df$Time) + lubridate::minute(df$Time)/60
# create new dataframe
df$StepsInt <- df$Steps
x <- find_missing(df)
while (dim(x)[1] > 0) {
# convert start and end times to clocktimes
startclock=lubridate::hour(x$start_missing[1]) + lubridate::minute(x$start_missing[1])/60
endclock=lubridate::hour(x$end_missing[1]) + lubridate::minute(x$end_missing[1])/60
# get index values for missing period
replaceindex <- which((df$Time >= ymd_hms(x$start_missing[1])) & (df$Time <= ymd_hms(x$end_missing[1])))
# now we want to see the steps data during the time period of interest on all other days
mean_steps <- df %>%
filter(clocktime >= startclock) %>%
filter(clocktime <= endclock) %>%
summarise(mean_steps = mean(Steps, na.rm = T)) %>%
unlist()
# replace values with the mean steps value from all other time periods
df$StepsInt[replaceindex] <- mean_steps
# checking that we replaced them all
missing <- df %>%
filter(Time > ymd_hms(x$start_missing[1])) %>%
filter(Time < ymd_hms(x$end_missing[1])) %>%
summarise(missing = sum(is.na(StepsInt))) %>%
unlist()
if (missing > 0){
print("error - detected missing values!")
} else {
print(paste0("all missing values replaced, ", sum(is.na(df$StepsInt)), " remaining"))
}
# make a plot to check that NA periods of interest are being interpolated
x <- data.frame(x, seq_along(start))
p <- df %>%
filter(Time > ymd_hms(x$start_missing[1]) - as.difftime(5, unit="mins")) %>%
filter(Time < ymd_hms(x$end_missing[1]) + as.difftime(5, unit="mins")) %>%
select(Time, Steps, StepsInt) %>%
melt(id.vars = c("Time")) %>%
ggplot() +
geom_rect(data=x, inherit.aes=FALSE, aes(xmin=ymd_hms(start_missing[1]), xmax=ymd_hms(end_missing[1]), ymin=-Inf,
ymax=Inf), fill="yellow", alpha=0.02) +
geom_line(aes(x = Time, y = value, group = variable, color = variable)) +
facet_wrap(. ~ variable, nrow = 2) +
scale_color_brewer(palette = "Set1") +
theme_classic() +
xlab("Time") + ylab("Steps") +
ylim(-0.1, max(df$Steps, na.rm = T))
# to do: figure out how to get these plots to print while in a while loop!
print(p)
# check for missing periods and update on each round of interpolation
x <- find_missing(df3)
print(dim(x)[1])
}
return(df)
}
interpolate_steps(df3)
x <- find_missing(df)
x <- find_missing(df3)
x
interpolate_steps <- function(df){
# where df is a dataframe containing Steps by minute from fitbit
df$clocktime=lubridate::hour(df$Time) + lubridate::minute(df$Time)/60
# create new dataframe
df$StepsInt <- df$Steps
x <- find_missing(df)
while (dim(x)[1] > 0) {
# convert start and end times to clocktimes
startclock=lubridate::hour(x$start_missing[1]) + lubridate::minute(x$start_missing[1])/60
endclock=lubridate::hour(x$end_missing[1]) + lubridate::minute(x$end_missing[1])/60
# get index values for missing period
replaceindex <- which((df$Time >= ymd_hms(x$start_missing[1])) & (df$Time <= ymd_hms(x$end_missing[1])))
# now we want to see the steps data during the time period of interest on all other days
mean_steps <- df %>%
filter(clocktime >= startclock) %>%
filter(clocktime <= endclock) %>%
summarise(mean_steps = mean(Steps, na.rm = T)) %>%
unlist()
# replace values with the mean steps value from all other time periods
df$StepsInt[replaceindex] <- mean_steps
# checking that we replaced them all
missing <- df %>%
filter(Time > ymd_hms(x$start_missing[1])) %>%
filter(Time < ymd_hms(x$end_missing[1])) %>%
summarise(missing = sum(is.na(StepsInt))) %>%
unlist()
if (missing > 0){
print("error - detected missing values!")
} else {
print(paste0("all missing values replaced, ", sum(is.na(df$StepsInt)), " remaining"))
}
# make a plot to check that NA periods of interest are being interpolated
x <- data.frame(x, seq_along(start))
p <- df %>%
filter(Time > ymd_hms(x$start_missing[1]) - as.difftime(5, unit="mins")) %>%
filter(Time < ymd_hms(x$end_missing[1]) + as.difftime(5, unit="mins")) %>%
select(Time, Steps, StepsInt) %>%
melt(id.vars = c("Time")) %>%
ggplot() +
geom_rect(data=x, inherit.aes=FALSE, aes(xmin=ymd_hms(start_missing[1]), xmax=ymd_hms(end_missing[1]), ymin=-Inf,
ymax=Inf), fill="yellow", alpha=0.02) +
geom_line(aes(x = Time, y = value, group = variable, color = variable)) +
facet_wrap(. ~ variable, nrow = 2) +
scale_color_brewer(palette = "Set1") +
theme_classic() +
xlab("Time") + ylab("Steps") +
ylim(-0.1, max(df$Steps, na.rm = T))
# to do: figure out how to get these plots to print while in a while loop!
print(p)
# check for missing periods and update on each round of interpolation
x <- find_missing(df)
print(dim(x)[1])
}
return(df)
}
interpolate_steps(df3)
# find missing data chunks
find_missing <- function(df){
x <- df %>%
dplyr::mutate(missing = ifelse(is.na(StepsInt), 1, 0)) %>%
dplyr::group_by(group = cumsum(c(0, diff(missing) != 0))) %>%
filter(missing == 1 & n() > 1) %>%
summarize("start_missing"=min(as.character(Time)),
"end_missing"=max(as.character(Time)),
"length_missing"=n()) %>%
ungroup() %>%
select(-matches("group"))
# create new cloktime variable
x$startclock=lubridate::hour(x$start_missing) + lubridate::minute(x$start_missing)/60
x$endclock=lubridate::hour(x$end_missing) + lubridate::minute(x$end_missing)/60
x <- x[order(x$length_missing),]
return(x)
}
interpolate_steps <- function(df){
# where df is a dataframe containing Steps by minute from fitbit
df$clocktime=lubridate::hour(df$Time) + lubridate::minute(df$Time)/60
# create new dataframe
df$StepsInt <- df$Steps
x <- find_missing(df)
while (dim(x)[1] > 0) {
# convert start and end times to clocktimes
startclock=lubridate::hour(x$start_missing[1]) + lubridate::minute(x$start_missing[1])/60
endclock=lubridate::hour(x$end_missing[1]) + lubridate::minute(x$end_missing[1])/60
# get index values for missing period
replaceindex <- which((df$Time >= ymd_hms(x$start_missing[1])) & (df$Time <= ymd_hms(x$end_missing[1])))
# now we want to see the steps data during the time period of interest on all other days
mean_steps <- df %>%
filter(clocktime >= startclock) %>%
filter(clocktime <= endclock) %>%
summarise(mean_steps = mean(Steps, na.rm = T)) %>%
unlist()
# replace values with the mean steps value from all other time periods
df$StepsInt[replaceindex] <- mean_steps
# checking that we replaced them all
missing <- df %>%
filter(Time > ymd_hms(x$start_missing[1])) %>%
filter(Time < ymd_hms(x$end_missing[1])) %>%
summarise(missing = sum(is.na(StepsInt))) %>%
unlist()
if (missing > 0){
print("error - detected missing values!")
} else {
print(paste0("all missing values replaced, ", sum(is.na(df$StepsInt)), " remaining"))
}
# make a plot to check that NA periods of interest are being interpolated
x <- data.frame(x, seq_along(start))
p <- df %>%
filter(Time > ymd_hms(x$start_missing[1]) - as.difftime(5, unit="mins")) %>%
filter(Time < ymd_hms(x$end_missing[1]) + as.difftime(5, unit="mins")) %>%
select(Time, Steps, StepsInt) %>%
melt(id.vars = c("Time")) %>%
ggplot() +
geom_rect(data=x, inherit.aes=FALSE, aes(xmin=ymd_hms(start_missing[1]), xmax=ymd_hms(end_missing[1]), ymin=-Inf,
ymax=Inf), fill="yellow", alpha=0.02) +
geom_line(aes(x = Time, y = value, group = variable, color = variable)) +
facet_wrap(. ~ variable, nrow = 2) +
scale_color_brewer(palette = "Set1") +
theme_classic() +
xlab("Time") + ylab("Steps") +
ylim(-0.1, max(df$Steps, na.rm = T))
# to do: figure out how to get these plots to print while in a while loop!
print(p)
# check for missing periods and update on each round of interpolation
x <- find_missing(df)
print(dim(x)[1])
}
return(df)
}
interpolate_steps(df3)
str(df3)
paste0(data_dir, "/", subject, "_heartrate_1min_*.csv")
hr_files <- list.files(data_dir, pattern = "heartrate_1min", full.names = T)
hr_files
subject
